#!/usr/bin/python

import email
import email.header
import sys
import subprocess
import re

def _mime_walk (mail,depth=0,attach=0,silent=False):
    global mime_index
    global parts_array
    a = " "*depth
    b = mail.get_content_type()
    mime_index+=1
    parts_array.append(mail)
    if mail.is_multipart():
        if not attach and not silent:
            print "%2d %s%s" %(mime_index,a,b)
        for part in mail.get_payload():
            _mime_walk(part,depth+1,attach=attach,silent=silent)
    elif not silent:
        c = decode_one_header(mail.get_filename())
        if mail.get_filename():
            print "%2d %s%s (%s)" %(mime_index,a,b,c)
        elif not attach:
            print "%2d %s%s" %(mime_index,a,b)

def decode_one_header (header):
    decoded = []
    try:
        for i in email.header.decode_header(header):
            h = i[0]
            if i[1] != None:
                h = h.decode(i[1],'ignore').encode('utf-8','ignore')
            decoded.append(h)
        return " ".join(decoded)
    except:
        try:
            h = header.encode('utf-8','ignore')
        except:
            h = ''
        return h

def print_headers (mail):
    print decode_one_header(mail.get("Subject")).replace("\n"," ")
    print "From:",decode_one_header(mail.get("From"))
    recips = get_all_recips(mail)
    if len(recips) > 3:
        print "To:  ",", ".join(recips[0:2]),"+%d others" %(len(recips)-2)
    else:
        print "To:  ",", ".join(recips)
    print "Date:",decode_one_header(mail.get("Date"))
    print ""

def get_all_recips (mail):
    r = []
    for i in ['to','cc']:
        rr = mail.get(i)
        if rr:
            r.extend(decode_one_header(rr).split(","))
    return [i.strip() for i in r]

def print_all_recips (mail):
    for i in ['to','cc']:
        r = mail.get(i)
        if r:
            print decode_one_header(r)

def get_text (mail):
    text = ''
    for part in mail.walk():
        if part.get_content_type() == 'text/plain':
            cset = part.get_content_charset()
            _text = part.get_payload(decode=1)
            if cset:
                try:
                    text += _text.decode(cset,'ignore').encode('utf-8','ignore')
                except:
                    text += _text
            else:
                text += _text
            text += '\n'
    #print some html if no suitable text parts
    if not text:
        for part in mail.walk():
            if part.get_content_type() == 'text/html':
                text = part.get_payload(decode=1)
                try:
                    pipe = subprocess.Popen(
                        ['w3m','-T','text/html','-dump'],
                        stdin=subprocess.PIPE,stdout=subprocess.PIPE)
                    (pout,perr) = pipe.communicate(input=text)
                    text = pout
                except:
                    text = ' *** could not show html part (no w3m), and no text parts ***\n\n'
    return text

def make_reply (mail, senderonly=False):
    subj = decode_one_header(mime.get("Subject"))
    if not re.match("^ *[Rr][Ee]:",subj):
        subj = "Re: " + subj
    print "Subject: " + subj
    print "To: " + decode_one_header(mime.get("From"))
    if not senderonly:
        print "Cc: " + ", ".join(get_all_recips(mail))
    print "In-Reply-To: " + mime.get("Message-id")
    refs = mime.get("References")
    if refs:
        refs = mime.get("Message-id") + " " + refs
    else:
        refs = mime.get("Message-id")
    print "References: " + refs
    print ""
    text = re.sub('\r\n','\n',get_text(mail))
    text = re.sub("^>",">>",text,flags=re.M)
    text = re.sub("^([^>])","> \\1",text,flags=re.M)
    print text

op = sys.argv[1]
mime_index = 0
header_print = 1
parts_array=[]
file_ind = 2
if op == 'part':
    arg = sys.argv[2]
    file_ind += 1
    header_print = 0
if op == 'reply':
    header_print = 0

for msg in sys.argv[file_ind:]:
    mail = open(msg,"r")
    mime = email.message_from_file(mail)
    mail.close()

    if header_print:
        print_headers(mime)
        header_print = 0

    if op == 'view':
        print re.sub('\r\n','\n',get_text(mime))

    if op == 'views':
        for part in mime.walk():
            print part.get_content_charset(),part.get_content_type()

    if op == 'part':
        _mime_walk(mime,silent=True)
        print parts_array[int(arg)-1].get_payload(decode=1)

    if op == 'mime':
        _mime_walk(mime)

    if op == 'attach':
        _mime_walk(mime,attach=1)

    if op == 'recips':
        print_all_recips(mime)

    if op == 'reply':
        make_reply(mime)

    if op == 'reply-sender':
        make_reply(mime,True)
